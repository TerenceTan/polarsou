import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { 
  Users, 
  ArrowRight, 
  Copy, 
  Share2, 
  CheckCircle2,
  AlertCircle,
  Calculator,
  CreditCard
} from 'lucide-react'
import MalaysianPaymentService from '@/utils/payment/malaysianPayments'
import PaymentMethodSelector from './PaymentMethodSelector'
import { toast } from 'sonner'

interface Participant {
  id: string
  name: string
  paid: number
  owes: number
  balance: number
}

interface PaymentInstructionsProps {
  participants: Participant[]
  sessionName: string
  organizerName: string
  className?: string
}

const PaymentInstructions: React.FC<PaymentInstructionsProps> = ({
  participants,
  sessionName,
  organizerName,
  className = ''
}) => {
  const [selectedParticipant, setSelectedParticipant] = useState<string | null>(null)
  const [showPaymentMethods, setShowPaymentMethods] = useState(false)

  // Calculate who owes money and who should receive money
  const debtors = participants.filter(p => p.balance < 0)
  const creditors = participants.filter(p => p.balance > 0)
  const evenParticipants = participants.filter(p => p.balance === 0)

  // Generate optimized payment instructions
  const generatePaymentInstructions = () => {
    const instructions: Array<{
      from: string
      to: string
      amount: number
      description: string
    }> = []

    // Simple algorithm: each debtor pays their share to creditors
    const sortedDebtors = [...debtors].sort((a, b) => a.balance - b.balance)
    const sortedCreditors = [...creditors].sort((a, b) => b.balance - a.balance)

    for (const debtor of sortedDebtors) {
      let remainingDebt = Math.abs(debtor.balance)
      
      for (const creditor of sortedCreditors) {
        if (remainingDebt <= 0) break
        
        const availableCredit = creditor.balance
        if (availableCredit <= 0) continue
        
        const paymentAmount = Math.min(remainingDebt, availableCredit)
        
        instructions.push({
          from: debtor.name,
          to: creditor.name,
          amount: paymentAmount,
          description: `${sessionName} - Bill split payment`
        })
        
        remainingDebt -= paymentAmount
        creditor.balance -= paymentAmount
      }
    }

    return instructions
  }

  const paymentInstructions = generatePaymentInstructions()

  const handleCopyInstructions = async () => {
    const instructionsText = `
Payment Instructions for: ${sessionName}

${paymentInstructions.map((inst, index) => 
  `${index + 1}. ${inst.from} pays ${MalaysianPaymentService.formatCurrency(inst.amount)} to ${inst.to}`
).join('\n')}

${evenParticipants.length > 0 ? `\nNo payment needed:\n${evenParticipants.map(p => `â€¢ ${p.name} (Even)`).join('\n')}` : ''}

Generated by BillSplit Malaysia ðŸ‡²ðŸ‡¾
    `.trim()

    try {
      await navigator.clipboard.writeText(instructionsText)
      toast.success('Payment instructions copied to clipboard!')
    } catch (error) {
      console.error('Failed to copy instructions:', error)
      toast.error('Failed to copy to clipboard')
    }
  }

  const handleShareInstructions = async () => {
    const instructionsText = `
ðŸ’° ${sessionName} - Payment Instructions

${paymentInstructions.map((inst, index) => 
  `${index + 1}. ${inst.from} â†’ ${inst.to}: ${MalaysianPaymentService.formatCurrency(inst.amount)}`
).join('\n')}

${evenParticipants.length > 0 ? `\nâœ… No payment needed: ${evenParticipants.map(p => p.name).join(', ')}` : ''}

Split with BillSplit Malaysia ðŸ‡²ðŸ‡¾
    `.trim()

    if (navigator.share) {
      try {
        await navigator.share({
          title: `${sessionName} - Payment Instructions`,
          text: instructionsText
        })
      } catch (error) {
        console.error('Failed to share:', error)
        handleCopyInstructions()
      }
    } else {
      handleCopyInstructions()
    }
  }

  const selectedParticipantData = participants.find(p => p.id === selectedParticipant)

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Summary Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calculator className="h-5 w-5" />
            Payment Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-red-600">{debtors.length}</div>
              <div className="text-sm text-gray-600">Need to Pay</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">{creditors.length}</div>
              <div className="text-sm text-gray-600">Will Receive</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-600">{evenParticipants.length}</div>
              <div className="text-sm text-gray-600">All Even</div>
            </div>
          </div>

          <Separator />

          <div className="flex gap-2">
            <Button onClick={handleCopyInstructions} variant="outline" className="flex-1">
              <Copy className="h-4 w-4 mr-2" />
              Copy Instructions
            </Button>
            <Button onClick={handleShareInstructions} className="flex-1">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Payment Instructions */}
      {paymentInstructions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ArrowRight className="h-5 w-5" />
              Who Pays Whom
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {paymentInstructions.map((instruction, index) => (
              <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-3">
                  <div className="bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    {index + 1}
                  </div>
                  <div>
                    <div className="font-medium">
                      {instruction.from} â†’ {instruction.to}
                    </div>
                    <div className="text-sm text-gray-600">
                      {instruction.description}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-bold text-green-600">
                    {MalaysianPaymentService.formatCurrency(instruction.amount)}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setSelectedParticipant(participants.find(p => p.name === instruction.from)?.id || null)
                      setShowPaymentMethods(true)
                    }}
                  >
                    <CreditCard className="h-4 w-4 mr-1" />
                    Pay Now
                  </Button>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      )}

      {/* All Even Participants */}
      {evenParticipants.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle2 className="h-5 w-5 text-green-600" />
              All Settled
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {evenParticipants.map((participant) => (
                <div key={participant.id} className="flex items-center gap-3 p-2">
                  <CheckCircle2 className="h-4 w-4 text-green-600" />
                  <span>{participant.name}</span>
                  <Badge variant="secondary">Even</Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Individual Balances */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Individual Balances
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {participants.map((participant) => (
            <div key={participant.id} className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <div className="font-medium">{participant.name}</div>
                <div className="text-sm text-gray-600">
                  Paid: {MalaysianPaymentService.formatCurrency(participant.paid)} | 
                  Owes: {MalaysianPaymentService.formatCurrency(participant.owes)}
                </div>
              </div>
              <div className="text-right">
                <div className={`font-bold ${
                  participant.balance === 0 ? 'text-green-600' : 
                  participant.balance > 0 ? 'text-blue-600' : 'text-red-600'
                }`}>
                  {participant.balance === 0 ? 'Even' : 
                   participant.balance > 0 ? 'Gets back' : 'Owes'}: {' '}
                  {participant.balance !== 0 && MalaysianPaymentService.formatCurrency(Math.abs(participant.balance))}
                </div>
                {participant.balance < 0 && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setSelectedParticipant(participant.id)
                      setShowPaymentMethods(true)
                    }}
                  >
                    <CreditCard className="h-4 w-4 mr-1" />
                    Pay Now
                  </Button>
                )}
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Payment Methods Modal */}
      {showPaymentMethods && selectedParticipantData && selectedParticipantData.balance < 0 && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-4 border-b">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold">Payment Options</h2>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowPaymentMethods(false)}
                >
                  âœ•
                </Button>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                {selectedParticipantData.name} needs to pay {MalaysianPaymentService.formatCurrency(Math.abs(selectedParticipantData.balance))}
              </p>
            </div>
            <div className="p-4">
              <PaymentMethodSelector
                amount={Math.abs(selectedParticipantData.balance)}
                recipientName={organizerName}
                description={`${sessionName} - Bill split payment from ${selectedParticipantData.name}`}
                onPaymentSelected={(method, link) => {
                  console.log('Payment selected:', method, link)
                  toast.success(`Payment method selected: ${method.name}`)
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default PaymentInstructions

